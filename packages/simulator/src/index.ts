import type { JsonValue } from "type-fest";

import { Computer, ComputerProgram } from "./computer";
import type { EventGenerator, SimulatorEvent } from "./events";

type Tickers = {
  cpu: EventGenerator;
};

export class Simulator {
  #computer: Computer;
  #tickers: Tickers;

  constructor() {
    this.#computer = new Computer();
    this.#tickers = {
      cpu: this.#computer.cpu.tick(),
    };
  }

  /**
   * Loads a program into the computer!
   * @param options.program The program to load.
   * @param options.memory Whether to leave all data (memory, registers, etc.) `unchanged`, `randomize` it or `clean` it.
   * @param options.devices Which devices to connect to the computer.
   */
  loadProgram(options: ComputerProgram) {
    this.#computer.loadProgram(options);

    this.#tickers.cpu.return();

    this.#tickers.cpu = this.#computer.cpu.tick();
  }

  /**
   * Returns a copy of the current state of the computer as a JSON object.
   */
  getComputerState(): JsonValue {
    return this.#computer.toJSON();
  }

  /**
   * Ticks one of the computer's devices.
   * This is, "advance one step in the simulation".
   *
   * For the CPU, it executes one micro-operation. For any other device, it executes one operation.
   *
   * @param device The device to tick.
   * @param [extra] Any extra data to pass to the device.
   * @returns The event that was generated by the tick, which could be from *any* device.
   */
  tick<TDevice extends keyof Tickers>(device: TDevice, extra?: unknown): SimulatorEvent {
    const { value, done } = this.#tickers[device].next(extra);
    if (done) throw new Error("Called tick on a finished ticker!");
    return value;
  }

  /**
   * Returns an object with all the devices of the computer
   * that can be interacted with from the outside.
   */
  get devices() {
    return {
      clock: { tick: this.#computer.devices.clock.tick },
      console: { clear: this.#computer.devices.console.clear },
      f10: { press: this.#computer.devices.f10.press },
      printer: this.#computer.devices.printer
        ? {
            clear: this.#computer.devices.printer.clear,
            print: this.#computer.devices.printer.print,
          }
        : null,
      switches: this.#computer.devices.switches
        ? { toggle: this.#computer.devices.switches.toggle }
        : null,
    };
  }
}
