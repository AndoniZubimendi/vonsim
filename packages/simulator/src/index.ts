import type { JsonValue } from "type-fest";

import { Computer, ComputerOptions } from "./computer";
import { SimulatorError } from "./error";
import type { EventGenerator, SimulatorEvent } from "./events";

export class Simulator {
  #computer: Computer | null = null;
  #cpuGenerator: EventGenerator | null = null;

  /**
   * Loads a program into the computer!
   * @param options.program The program to load.
   * @param options.data Whether to leave all data (memory, registers, etc.) `unchanged`, `randomize` it or `clean` it.
   * @param options.devices Which devices to connect to the computer.
   */
  loadProgram(options: ComputerOptions) {
    this.#computer = new Computer(options);
  }

  /**
   * Returns a copy of the current state of the computer as a JSON object.
   */
  getComputerState(): JsonValue {
    return this.#computer?.toJSON() || null;
  }

  /**
   * Advances the CPU one micro-operation.
   *
   * Also, accepts an optional parameter `extra` that can be used to pass data to the CPU.
   * For instance, after a "computer:read" event, it needs to be a Byte<8>.
   *
   * @param [extra] Any extra data to pass to the CPU.
   * @returns The event that was generated by the Simulator, which could be from *any* device.
   */
  advanceCPU(extra?: unknown): SimulatorEvent {
    if (!this.#computer) throw new SimulatorError("no-program");

    this.#cpuGenerator ??= this.#computer.cpu.run();
    const { value, done } = this.#cpuGenerator.next(extra);
    if (done) throw new Error("Called advanceCPU on a finished CPU!");

    return value;
  }

  /**
   * Returns an object with all the devices of the computer
   * that can be interacted with from the outside.
   */
  get devices() {
    if (!this.#computer) throw new Error("No computer loaded!");

    return {
      clock: { tick: this.#computer.io.clock.tick },
      console: { clear: this.#computer.io.console.clear },
      f10: { press: this.#computer.io.f10.press },
      printer:
        "printer" in this.#computer.io
          ? {
              clear: this.#computer.io.printer.clear,
              print: this.#computer.io.printer.print,
            }
          : null,
      switches:
        "switches" in this.#computer.io ? { toggle: this.#computer.io.switches.toggle } : null,
    };
  }
}

export type { ComputerOptions, SimulatorEvent };
export { SimulatorError };
